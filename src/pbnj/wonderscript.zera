; vim: ft=clojure
(ns pbnj.wonderscript)

(define-function emit-nil [exp] "null")
(define-function emit-number [exp] (str exp))
(define-function emit-boolean [exp] (if exp "true" "false"))

(define-function emit-symbol
  [exp]
  (let [nm (name exp)
        ns (namespace exp)]
    (if (nil? ns) nm (str ns "." nm))))

(define-function emit-keyword
  [exp]
  (let [nm (name exp)
        ns (namespace exp)]
    (if (nil? ns)
      (str "mori.keyword('" nm "')")
      (str "mori.keyword('" ns "','" nm "')"))))

(define-function emit-string [exp] (str "\"" exp "\""))

(define-function emit-if
  ([predicate consequent]
   (emit-if predicate consequent nil))
  ([predicate consequent alternate]
   (let [pred (compile predicate)
         conse (compile consequent)
         alt (compile alternate)]
     (str pred "?" conse ":" alt))))

(define-function emit-existential
  [exp]
  (let [value (compile (second exp))]
    (str "((typeof " value "!==\"undefined\")&&(" value "!==null))")))

(define-function emit-instanceof
  [exp]
  (str "(" (compile (second exp)) " instanceof " (compile (first (rest (rest exp)))) ")"))

(define-function emit-typeof
  [exp]
  (str "(typeof " (compile (second exp)) ")"))

(define-function emit-definition
  ([sym] (emit-definition sym nil))
  ([sym value]
   (let [ns (namespace sym)
         nm (name sym)]
     (if ns
       (str ns "['" nm "']=" (compile value))
       (str "var " nm "=" (compile value))))))

(define-function emit-argument-list [args]
  (if (empty? args) "()"
      (str "(" (join "," (map compile args)) ")")))

(define-function emit-function [exp]
  (let [ident (second exp)]
    (cond (sequential? ident)
            (str "(function" (emit-argument-list (second exp)) "{" (emit-function-body (rest (rest exp))) "})")
          (symbol? ident)
            (str "(function " (second exp) (emit-argument-list (second (rest exp))) "{" (emit-function-body (rest (rest (rest exp)))) "})")
          :else
            (throw "malformed function expression"))))

(define-function emit-function-body
  [body]
  (let [stmts (map compile body)
        rest (take (- (count stmts) 1) stmts)
        last (drop (- (count stmts) 1) stmts)]
    (if (empty? rest)
      (str "return " (first last) ";")
      (str (join ";" rest) ";return " (first last) ";"))))

(define-function emit-object-resolution
  [obj prop]
  (str (compile obj) "[" (if (number? prop) prop (str "'" prop "'")) "]"))

(define-function emit-method-call [exp]
  (let [size (count exp)
        obj (second exp)
        method (second (rest exp))
        args (rest (rest (rest exp)))]
    (cond (>= size 3)
            (compile (cons (list '.- obj (str method)) args))
          :else
            (throw "a method call should be a list of at least 3 elements"))))

(define-function emit-class-init [exp]
  (let [size (count exp)]
    (cond (= size 2)
            (str "(new " (compile (second exp)) "())")
          (> size 2)
            (str "(new " (compile (second exp)) "(" (join "," (map compile (rest (rest exp)))) "))"))))

(define-function emit-property-assignment [exp]
  (let [size (count exp)
        obj (second exp)
        prop (second (rest exp))
        value (second (rest (rest exp)))]
    (cond (= size 4)
            (if (vector? prop)
              (str (compile obj) "['" (join "']['" prop) "']=" (compile value))
              (str (compile obj) "['" prop "']=" (compile value)))
          :else
            (throw "property assignment should be a list of 4 elements"))))

(define-function emit-assignment
  [obj value]
  (str "(" (compile obj) "="
       (if (symbol? value) value (compile value)) ")"))

(define-function literal?
  [val]
  (or (nil? val) (number? val) (boolean? val) (string? val) (keyword? val) (map? val) (vector? val)))


(define-function emit-quote
  [val]
  (cond
    (symbol? val)
      (let [ns (namespace val)
            nm (name val)]
        (if ns
          (str "mori.symbol('" ns "', '" nm "')")
          (str "mori.symbol('" nm "')")))
    (list? val)
      (str "mori.list(" (join "," (map compile val)) ")")
    :else
      (compile val)))

(define BINARY-OPERATORS
  '{<       <
    <=      <=
    >       >
    >=      >=
    mod     %
    bit-and &
    bit-or  |})

(define binary-operator? BINARY-OPERATORS)

(define-function emit-binary-operator
  [op left right]
  (let [op* (BINARY-OPERATORS op)]
    (unless op* (throw (js/Error. "invalid binary operator: " (inspect op))))
    (str "(" (compile left) ")" op* "(" (compile right) ")")))

(define UNARY-OPERATORS
  '{not !})

(define unary-operator? UNARY-OPERATORS)

(define-function emit-unary-operator
  [op exp]
  (let [op* (UNARY-OPERATORS op)]
    (unless op* (throw (js/Error. "invalid unary operator: " (inspect op))))
    (str op* "(" (compile exp) ")")))

(define arithmetic-operator? '#{+ - * /})

(define-function emit-arithmetic-operator
  [op &args]
  (let [argc (count args)]
    (case op
      '+ (case argc
           0 0
           1 (str "+" (compile (first args)))
           :else
             (str "(" (join ")+(" (map compile args)) ")"))
      '- (case argc
           0 0
           1 (str "-" (compile (first args)))
           :else
             (str "(" (join ")-(" (map compile args)) ")"))
      '* (case argc
           0 1
           1 (compile (first args))
           :else
             (str "(" (join ")*(" (map compile args)) ")"))
      '/ (case argc
           0 1
           1 (compile (first args))
           :else
             (str "(" (join ")/(" (map compile args)) ")"))
      :else
        (throw (js/Error. "invalid arithmetic operator: " (inspect op))))))

(define PRIMITIVE-FUNCTIONS
  '{= mori.equals
    hash mori.hash
    list? mori.isList
    seq? mori.isSeq
    vector? mori.isVector
    map? mori.isMap
    set? mori.isSet
    collection? mori.isCollection
    sequential? mori.isSequential
    associative? mori.isAssociative
    counted? mori.isCounted
    indexed? mori.isIndexed
    reduceable? mori.isReduceable
    seqable? mori.isSeqable
    reversible? mori.isReversable
    list mori.list
    vector mori.vector
    hash-map mori.hashMap
    set mori.set
    sorted-set mori.sortedSet
    range mori.range
    queue mori.queue
    conj mori.conj
    into mori.into
    assoc mori.assoc
    dissoc mori.dissoc
    distinct mori.distinct
    empty mori.empty
    get mori.get
    get-in mori.getIn
    has-key mori.hasKey
    find mori.find
    nth mori.nth
    last mori.last
    assoc-in mori.assocIn
    update-in mori.updateIn
    count mori.count
    empty? mori.isEmpty
    peek mori.peek
    pop mori.pop
    zipmap mori.zipmap
    reverse mori.reverse
    subvec mori.subvec
    keys mori.keys
    vals mori.vals
    merge mori.merge
    disj mori.disj
    union mori.union
    intersection mori.intersection
    difference mori.difference
    subset? mori.isSubset
    superset? mori.isSuperset
    first mori.first
    rest mori.rest
    seq mori.seq
    cons mori.cons
    concat mori.concat
    flatten mori.flatten
    into-array mori.intoArray
    map mori.map
    mapcat mori.mapcat
    filter mori.filter
    remove mori.remove
    reduce mori.reduce
    reduce-kv mori.reduceKV
    take mori.take
    take-while mori.takeWhile
    drop mori.drop
    drop-while mori.dropWhile
    some mori.some
    every mori.every
    sort mori.sort
    sort-by mori.sortBy
    interpose mori.interpose
    interleave mori.interleave
    iterate mori.iterate
    repeat mori.repeat
    repeatedly mori.repeatedly
    partition mori.partition
    partition-by mori.partitionBy
    group-by mori.groupBy
    prim-seq mori.primSeq
    identity mori.identity
    constantly mori.constantly
    inc mori.inc
    dec mori.dec
    even? mori.isEven
    odd? mori.isOdd
    comp mori.comp
    juxt mori.juxt
    knit mori.knit
    partial mori.partial
    curry mori.curry
    fnil mori.fnil
    ->js mori.toJs
    ->clj mori.toClj
    + pbnj.core["+"]
    - pbnj.core["-"]
    * pbnj.core["*"]
    / pbnj.core["/"]
    > pbnj.core[">"]
    < pbnj.core["<"]
    <= pbnj.core["<="]
    >= pbnj.core[">="]
    array pbnj.core.array
    name pbnj.core.name
    namespace pbnj.core.namespace
    inspect pbnj.core.inspect
    number? pbnj.core.isNumber
    string? pbnj.core.isString
    boolean? pbnj.core.isBoolean
    nil? pbnj.core.isNull
    null? pbnj.core.isNull
    undefined? pbnj.core.isUndefined
    date? pbnj.core.isDate
    error? pbnj.core.isError
    regexp? pbnj.core.isRegExp
    array? pbnj.core.isArray
    object? pbnj.core.isObject
    str pbnj.core.str
    arraylike? pbnj.core.isArrayLike
    fn? pbnj.core.isFunction
    arguments? pbnj.core.isArguments
    identical? pbnj.core["identical?"]
    equiv? pbnj.core["equiv?"]
    memoize pbnj.core.memoize
})

(define primitive-function? PRIMITIVE-FUNCTIONS)

(define-function emit-primitive-function
  [fn args]
  (let [fn* (PRIMITIVE-FUNCTIONS fn)]
    (unless fn* (throw (js/Error. "invalid primitive function: " (inspect fn))))
    (if (empty? args)
      (str fn* "()")
      (str fn* "(" (join "," (map compile args)) ")"))))

(define-function emit-application
  [fn &args]
  (if (primitive-function? fn)
    (emit-primitive-function fn args)
    (if (empty? args)
      (str fn "()")
      (str fn "(" (join "," (map compile args)) ")"))))

(define-function emit-map
  [exp]
  (if (empty? exp)
    (str "mori.hashMap()")
    (str "mori.hashMap("
        (reduce
          (lambda [s pair]
                  (str (if (nil? s) "" (str s ","))
                      "(" (compile (first pair)) ")"
                      ","
                      "(" (compile (second pair)) ")")) nil exp)
        ")")))

(define-function emit-vector [exp]
  (if (empty? exp)
    "mori.vector()"
    (str "mori.vector((" (join "),(" (map compile exp)) "))")))

(define :dynamic *macros* {})
(define mori (js.node/require "mori"))

(define-function eval-macro-definition
  [name args &body]
  (let [fn (cons 'fn (cons args body))]
    (set! *macros* (assoc *macros* name (js/eval (compile fn))))
    nil))

(define-function emit-macro-definition
  [name args &body]
  (let [fn (cons 'fn (cons args body))]
    (str "pbnj.wonderscript.MACROS['" name "']=" (compile fn))))
  
(define-function macroexpand [exp]
  (if (list? exp)
    (let [tag (first exp)
          xfr (get *macros* tag)]
      (if xfr
        (macroexpand (apply xfr (rest exp)))
        exp))
    exp))

(define-function compile [exp_]
  (let [exp (macroexpand exp_)]
    (cond
      (nil? exp) (emit-nil exp)
      (number? exp) (emit-number exp)
      (boolean? exp) (emit-boolean exp)
      (symbol? exp) (emit-symbol exp)
      (keyword? exp) (emit-keyword exp)
      (string? exp) (emit-string exp)
      (map? exp) (emit-map exp)
      (vector? exp) (emit-vector exp)
      (list? exp)
        (let [tag (first exp)]
          (cond
            (= tag 'def) (apply emit-definition (rest exp))
            (= tag 'if) (apply emit-if (rest exp))
            (= tag 'quote) (emit-quote (second exp))
            (= tag 'defmacro) (apply eval-macro-definition (rest exp))
            (= tag '?) (emit-existential exp)
            (= tag 'fn) (emit-function exp)
            (= tag 'try) (emit-try-block exp)
            (= tag '.-) (apply emit-object-resolution (rest exp))
            (= tag 'new) (emit-class-init exp)
            (= tag 'set!) (apply emit-assignment (rest exp))
            (binary-operator? tag) (apply emit-binary-operator exp)
            (unary-operator? tag) (apply emit-unary-operator exp)
            (arithmetic-operator? tag) (apply emit-arithmetic-operator exp)
            (= tag 'compile) (compile exp)
            :else
              (apply emit-application exp)))
        :else
          (throw (str "invalid form: '" exp "'")))))

(define-function eval
  [exp]
  (let [code (compile exp)]
    (js/eval code)))

(define-function compile-stream
  [stream]
  (let [buffer (array)]
    (until (.eof stream)
      (let [exp (.peek stream)
            code (compile exp)]
        (.push buffer code)
        (.next stream)))
    (str (.join buffer ";\n") ";")))

(define-function compile-string
  [input source]
  (compile-stream (zera.reader/readString file source)))

(define-function compile-js
  [input]
  (compile-stream (zera.reader/readJS input)))

(define-function compile-json
  [input]
  (compile-stream (zera.reader/readJS (.parse js/JSON input))))

(define-function compile-file
  [file]
  (compile-stream (zera.reader/readFile file)))

(define-function read-string
  [input source]
  (js/eval (compile-string input source)))

(define-function read-file
  [file]
  (js/eval (compile-file file)))

;(say (compile '(def x 1)))
;(say (compile '(def user/x 1)))
;(say (compile '(def pbnj.wonderscript/x 1)))
;(say (compile '(if 1 2)))
;(say (compile '(if 1 2 (if 3 4))))
;(say (compile '(macro comment [] nil)))
;(say (compile '(comment 1 2 3 4 5)))
;(say (compile '(? x)))
;(say (compile '(fn [x] x)))
;(say (compile '(fn [x] 1 2 3 (console.log "Hello") x)))
;(say (compile '(.- window location)))
;(say (compile '(new Date)))
;(say (compile '(new Date 2017 7 31)))
;(say (compile '(set! window.location "http://google.com")))
;(say (compile '(+)))
;(say (compile '(+ 1)))
;(say (compile '(+ 1 3 4)))
;(say (compile '(< 1 3)))
;(say (compile '(not false)))
;(say (compile '(= 1 2 3 4)))
;(say (compile '(list 1 2 3 4)))
;(say (compile '(hash-map :a 1 :b 2)))
;(say (compile {:a 1 :b 2}))
;(say (compile [1 2 3 4]))
;(say (compile '(quote 1)))
;(say (compile '(quote true)))
;(say (compile '(quote nil)))
;(say (compile '(quote :test)))
;(say (compile '(quote test)))
;(say (compile '(quote (1 2 3 4))))
;(say (compile '(quote {:a {:b 1} :c {:d {:e 2}}})))
;(say (compile '(quote [1 3 4 [5 6]])))

;(test literals
;  (is (= (compile nil) "null"))
;  (is (= (compile 1) "1"))
;  (is (= (compile 3435) "3435"))
;  (is (= (compile 3.14159) "3.14159"))
;  (is (= (compile -3.14159) "-3.14159"))
;  (is (= (compile true) "true"))
;  (is (= (compile false) "false"))
;  (is (= (compile 'symbol) "symbol"))
;  (is (= (compile 'namespaced/symbol) "namespaced.symbol"))
;  (is (= (compile :keyword) "keyword"))
;  (is (= (compile :namespaced/keyword) "namespaced.keyword"))
;  (is (= (compile "test") "\"test\""))
;  (is (= (compile (hash-map)) "({})"))
;  (is (= (compile (hash-map :a 1 :b 2)) "({a:1,b:2})"))
;  (is (= (compile (vector)) "([])"))
;  (is (= (compile (vector 1 2 3 4 5)) "([1,2,3,4,5])")))
;
;(test if-else
;  (is (= (compile '(if-else true 1)) "if(true){1}"))
;  (is (= (compile '(if-else true 1 false 2)) "if(true){1}else if(false){2}"))
;  (is (= (compile '(if-else true 1 false 2 :else 3)) "if(true){1}else if(false){2}else{3}")))
;
;(test if
;  (is (= (compile '(if true 1)) "(true)?(1):(null)"))
;  (is (= (compile '(if true 1 2)) "(true)?(1):(2)"))
;  (is (= (eval '(if true 1)) 1))
;  (is (= (eval '(if true 1 2)) 1))
;  (is (= (eval '(if false 1 2)) 2))
;  (is (= (eval '(if false 1)) nil)))
;
;(test ?
;  (is-not (eval '(? nil)))
;  (is (eval '(? true)))
;  (is (eval '(? false)))
;  (is (eval '(? {})))
;  (is (eval '(? [])))
;  (is (eval '(? "")))
;  (is (eval '(? 0))))
;
;(test instance?
;  (is (eval '(instance? (new Date) Date)))
;  (is-not (eval '(instance? Math Date))))
;
;(test typeof
;  (is (= "number" (eval '(typeof 1))))
;  (is (= "string" (eval '(typeof "aasfwewrqfwdf"))))
;  (is (= "object" (eval '(typeof nil))))
;  (is (= "boolean" (eval '(typeof true))))
;  (is (= "object" (eval '(typeof {}))))
;  (is (= "object" (eval '(typeof [])))))
;
;(test do
;  (is (= "1;2;3;4;" (compile '(do 1 2 3 4)))))
;
;(test var
;  (is (= "var x;" (compile '(var x))))
;  (is (= "var x=1;" (compile '(var x 1)))))
;
;(test let
;  (is (= "let x;" (compile '(let x))))
;  (is (= "let x=1;" (compile '(let x 1)))))
;
;(test const
;  (is (= "const x;" (compile '(const x))))
;  (is (= "const x=1;" (compile '(const x 1)))))
;
;(test function
;  (is (= 1, ((eval '(paren (function [x] (return x)))) 1))))
;
;(test application)

;(say (compile-file "src/pbnj/core.ws"))
;(say (pbnj.wonderscript/compile-string "(console.log \"test\") 1 2 3" "test"))
;(p (compile-stream (zera.reader/readString "'(1 2 3) \"Test\"")))
